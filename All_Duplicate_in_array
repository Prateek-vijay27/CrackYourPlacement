_________________Method 1 _______________

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        HashSet<Integer> set=new HashSet<>();
         List<Integer> l=new ArrayList<>();                using SET 
        for(int i=0;i<nums.length;i++)                      TIME- O(n)
        {                                                     Space- O(n)
           boolean value= set.add(nums[i]);
            if(value==false)
                l.add(nums[i]);
        }
        return l;
    }
}

__________________-Method 2________________

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
       
        int i=0;
        int n=nums.length;                                              [1,n] array elements and   size of array is n
        List<Integer> l=new ArrayList<>();
        while(i<n)                                                      time-O(n) space O(1)
        {                                                               logic --> Cycle Sort
            if(i!=nums[0]-1 && nums[i]!=nums[nums[i]-1])                        nums[i]!=nums[nums[i]-1] --> this condition is to handle duplicate 
            {                                                             
              //swap(nums[i],nums[nums[i]-1]);
                int temp=nums[nums[i]-1];
               nums[nums[i]-1]=nums[i];
                 nums[i]=temp;
            }
            else 
                i++;
        }
        for(int j=0;j<nums.length;j++)
        {                                             // adding those number into the list who are not at their correct position means duplicate numbers  
            if(j!=nums[j]-1)
                l.add(nums[j]);
        }
        return l;
    }
    
}
