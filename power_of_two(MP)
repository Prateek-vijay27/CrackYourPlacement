_________________-Method -1 _______________
class Solution {
    public boolean isPowerOfTwo(int n) {
                                            // time O(logn)    continiously dividing the number by 2
        if(n==0)                              space - O(1)
        return false; 
        while(n!=1)
        {
            if(n%2!=0)
                return false;
             else 
                 n=n/2;
        }
        return true;
    
    }
}

__________________-Method -2________________-

If we subtract a power of 2 numbers by 1 then all unset bits after the only set bit become set; and the set bit becomes unset.
For example for 4 ( 100) and 16(10000), we get the following after subtracting 1 
3 –> 011 
15 –> 01111

So, if a number n is a power of 2 then bitwise & of n and n-1 will be zero. We can say n is a power of 2 or not based on the value of n&(n-1). 

class Solution {
   public boolean isPowerOfTwo(int n)
   {
                                             // using BIT MANIPULATION   
      if(n <=0)
      return false;                           // time- O(1)  space O(1)
       
       return (n&n-1) == 0;
    
   }
}
