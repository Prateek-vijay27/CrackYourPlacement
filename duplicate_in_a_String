___________________METHOD -1 ___________________
public class duplicate {
	static final int NO_OF_CHARS = 256;
	static void fillCharCounts(String str,
								int[] count)
	{
		for (int i = 0; i < str.length(); i++)                            time - O(N)
			count[str.charAt(i)]++;                                         space - O(N)
	}
	static void printDups(String str)
	{
		int count[] = new int[NO_OF_CHARS];
		fillCharCounts(str, count);

		for (int i = 0; i < NO_OF_CHARS; i++)
			if (count[i] > 1)
				System.out.println((char)(i) +
						", count = " + count[i]);
	}

___________________________METHOD 2 _______________________-

import java.util.*;

class duplicate {

	static void printDups(String str)
	{
		HashMap<Character, Integer> count = new HashMap<>();
		for (int i = 0; i < str.length(); i++) {                            time - O(nlogn)
			if (!count.containsKey(str.charAt(i)))                              space - O(K)  k-- size of map
				count.put(str.charAt(i), 1);
			else
				count.put(str.charAt(i),
						count.get(str.charAt(i)) + 1);
		}
		for (Map.Entry mapElement : count.entrySet()) {
			char key = (char)mapElement.getKey();
			int value = ((int)mapElement.getValue());

			if (value > 1)
				System.out.println(key
								+ ", count = " + value);
		}
	}
	public static void main(String[] args)
	{
		String str = "test string";
		printDups(str);
	}
}
