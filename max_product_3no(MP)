____________________-Method -1 _____________________

 --> it could also be possible that two negative numbers lying at the left extreme end could also contribute to lead to a larger product if the third number in the triplet 
 being considered is the largest positive number in the nums array.

Thus, either the product nums[0]×nums[1]×nums[n−1] or nums[n−3]×nums[n−2]×nums[n−1] will give the required result.
Thus, we need to find the larger one from out of these values.

class Solution {
    public int maximumProduct(int[] nums) {
        Arrays.sort(nums);                                                               //  time O(nlogn)   space O(logn)   because sorting takes logn space
        return Math.max(nums[nums.length-1]*nums[nums.length-2]*nums[nums.length-3],
                        nums[0]*nums[1]*nums[nums.length-1]);
    }
}

_________________________Method 2 ____________________

class Solution {
     public int maximumProduct(int[] nums) {
         int min1=Integer.MAX_VALUE;
         int min2=Integer.MAX_VALUE;
         int max1=Integer.MIN_VALUE;
         int max2=Integer.MIN_VALUE;
         int max3= Integer.MIN_VALUE;
                                                      // time O(n)   space -O(1)
         for(int n:nums)
         {
             if(n<=min1)
             {    
               min2=min1;
               min1=n;
             }
             else if(n<=min2)
                 min2=n;
             
             if(n>=max1)
             {
                 max3=max2;
                 max2=max1;
                 max1=n;  
             }
             else if(n>=max2)
             {
                 max3=max2;
                 max2=n;
             }
             else if(n>=max3)
                 max3=n;   
         }
          return Math.max(min1 * min2 * max1, max1 * max2 * max3);
         
     }
}
